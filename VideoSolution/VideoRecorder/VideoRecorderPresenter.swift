//
//  VideoRecorderPresenter.swift
//  VideoSolution
//
//  Created Galean Pallerman on 26.07.2019.
//  Copyright Â© 2019 GPco. All rights reserved.
//
//  Template generated by Galean Pallerman
//

import Foundation
import UIKit

class VideoRecorderPresenter: NSObject {
    var interactor: VideoRecorderPresenterToInteractorProtocol!
    weak var viewController: VideoRecorderPresenterToViewProtocol!
    
    //MARK: Initialization
    func configure(interactor: (VideoRecorderPresenterToInteractorProtocol),
                   viewController: (VideoRecorderPresenterToViewProtocol)) {
        self.interactor = interactor
        self.viewController = viewController
    }
}

//MARK:- VideoRecorderInteractorToPresenterProtocol
extension VideoRecorderPresenter: VideoRecorderInteractorToPresenterProtocol {
    func display(videoPreview: CIImage) {
        let uiimage = UIImage(ciImage: videoPreview)
        
        DispatchQueue.main.async {
            self.viewController.display(videoPreview: uiimage)
        }
    }
    
    func displayVideoInputChange() {
        DispatchQueue.main.async {
            self.viewController.flipVideoPreview()
        }
    }
    
    func updateCameraRollPreview(with galleryData: GalleryPreviewData) {
        DispatchQueue.main.async {
            self.viewController.updateCameraRollPreview(with: galleryData.image)
        }
    }
    
    func handleAudio(muted: Bool) {
        DispatchQueue.main.async {
            self.viewController.changeAudioButton(muted: muted)
        }
    }
    
    func handleTorch(isSupported: Bool, mode: TorchMode?) {
        DispatchQueue.main.async {
            self.viewController.makeTorchButton(hidden: !isSupported)
            if isSupported {
                guard let m = mode else {
                    print("VideoRecorderPresenter: Torch is supported, but mode is nil")
                    assert(false)
                    return
                }
                self.viewController.changeTorchButton(mode: m)
            }
        }
    }
}

//MARK:- VideoRecorderViewToPresenterProtocol
extension VideoRecorderPresenter: VideoRecorderViewToPresenterProtocol {
    func switchCameraButtonClicked() {
        interactor.requestedSwitchCamera()
    }
    
    func viewDidLoad() {
        interactor.requestedHandleViewDidLoad()
    }
    
    func galleryButtonClicked(){
        interactor.requestedGallery()
    }
    
    func startRecordingButtonClicked(){
        interactor.requestedStartRecording()
        viewController!.startTimer()
    }
    
    func stopRecordingButtonClicked() {
        interactor.requestedStopRecording()
        viewController!.resetTimer()
    }
    
    func muteButtonClicked(){
        interactor.requestedMute()
    }
    
    func torchButtonClicked(){
        interactor.requestedTorch()
    }
}
